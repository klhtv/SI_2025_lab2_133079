/*
 * This source file was generated by the Gradle 'init' task
 */
package SILab2;

import org.junit.jupiter.api.Test;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

public class SILab2Test {

    // Test cases for Every Statement criterion
    @Test
    public void testEveryStatement() {
        // TC1: allItems is null
        RuntimeException ex1 = assertThrows(RuntimeException.class, () ->
                SILab2.checkCart(null, "1234567812345678"));
        assertEquals("allItems list can't be null!", ex1.getMessage());

        // TC2: valid item, no discount, no penalty
        List<Item> items2 = List.of(new Item("Book", 1, 100, 0));
        assertEquals(100.0, SILab2.checkCart(items2, "1234567812345678"));

        // TC3: item name is null
        List<Item> items3 = List.of(new Item(null, 1, 100, 0));
        RuntimeException ex3 = assertThrows(RuntimeException.class, () ->
                SILab2.checkCart(items3, "1234567812345678"));
        assertEquals("Invalid item!", ex3.getMessage());

        // TC4: penalty triggered (price > 300)
        List<Item> items4 = List.of(new Item("Laptop", 1, 350, 0));
        assertEquals((350 - 30), SILab2.checkCart(items4, "1234567812345678"));

        // TC5: discount applied (0.2)
        List<Item> items5 = List.of(new Item("Shirt", 1, 100, 0.2));
        assertEquals((100 * 0.8) - 30, SILab2.checkCart(items5, "1234567812345678"));

        // TC6: invalid card number length
        List<Item> items6 = List.of(new Item("Pen", 1, 10, 0));
        RuntimeException ex6 = assertThrows(RuntimeException.class, () ->
                SILab2.checkCart(items6, "1234"));
        assertEquals("Invalid card number!", ex6.getMessage());

        // TC7: invalid character in card number
        List<Item> items7 = List.of(new Item("Pants", 1, 80, 0));
        RuntimeException ex7 = assertThrows(RuntimeException.class, () ->
                SILab2.checkCart(items7, "12345678abcd5678"));
        assertEquals("Invalid character in card number!", ex7.getMessage());
    }

    // Test cases for Multiple Condition criterion for:
    // if (item.getPrice() > 300 || item.getDiscount() > 0 || item.getQuantity() > 10)
    @Test
    public void testMultipleCondition() {
        // A = false, B = false, C = false
        List<Item> tc1 = List.of(new Item("Item1", 1, 100, 0.0));
        assertEquals(100.0, SILab2.checkCart(tc1, "1234567812345678"));

        // A = false, B = false, C = true
        List<Item> tc2 = List.of(new Item("Item2", 11, 100, 0.0));
        assertEquals((11 * 100) - 30, SILab2.checkCart(tc2, "1234567812345678"));

        // A = false, B = true, C = false
        List<Item> tc3 = List.of(new Item("Item3", 1, 100, 0.1));
        assertEquals((100 * 0.9) - 30, SILab2.checkCart(tc3, "1234567812345678"));

        // A = false, B = true, C = true
        List<Item> tc4 = List.of(new Item("Item4", 11, 100, 0.1));
        assertEquals((100 * 0.9 * 11) - 30, SILab2.checkCart(tc4, "1234567812345678"));

        // A = true, B = false, C = false
        List<Item> tc5 = List.of(new Item("Item5", 1, 400, 0.0));
        assertEquals((400 - 30), SILab2.checkCart(tc5, "1234567812345678"));

        // A = true, B = false, C = true
        List<Item> tc6 = List.of(new Item("Item6", 11, 400, 0.0));
        assertEquals((400 * 11) - 30, SILab2.checkCart(tc6, "1234567812345678"));

        // A = true, B = true, C = false
        List<Item> tc7 = List.of(new Item("Item7", 1, 400, 0.1));
        assertEquals((400 * 0.9) - 30, SILab2.checkCart(tc7, "1234567812345678"));

        // A = true, B = true, C = true
        List<Item> tc8 = List.of(new Item("Item8", 11, 400, 0.1));
        assertEquals((400 * 0.9 * 11) - 30, SILab2.checkCart(tc8, "1234567812345678"));
    }
}

